<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>王雪庆 on Mr.哈利-南山不寒</title>
    <link>https://HarryQing.github.io/tags/%E7%8E%8B%E9%9B%AA%E5%BA%86/</link>
    <description>Recent content in 王雪庆 on Mr.哈利-南山不寒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 11 Jan 2021 16:20:00 +0800</lastBuildDate><atom:link href="https://HarryQing.github.io/tags/%E7%8E%8B%E9%9B%AA%E5%BA%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.6.2 浮点型变量/常量</title>
      <link>https://HarryQing.github.io/java/2.6.2-%E6%B5%AE%E7%82%B9%E5%9E%8B%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Mon, 11 Jan 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.6.2-%E6%B5%AE%E7%82%B9%E5%9E%8B%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F/</guid>
      <description>带小数的数据在Java中称为浮点型。浮点型可分为float类型和double类型。
   类型 占用存储空间 表数范围     float 4字节 -3.403E38~3.403E38   double 8字节 -1.798E308~1.798E308    float类型又被称作单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型，绝大部分应用程序都采用double类型。浮点型常量默认类型也是double。
Java浮点类型常量有两种表示形式 十进制数形式，例如:3.14 314.0 0.314 科学记数法形式，如314e2 314E2 314E-2 【示例2-11】 使用科学记数法给浮点型变量赋值
double f = 314e2; //314*10^2--&amp;gt;31400.0double f2 = 314e-2; //314*10^(-2)--&amp;gt;3.14 float类型的数值有一个后缀F或者f ，没有后缀F/f的浮点数值默认为double类型。也可以在浮点数值后添加后缀D或者d， 以明确其为double类型。
【示例2-12】 float类型赋值时需要添加后缀F/f
float f = 3.14F;double d1 = 3.14;double d2 = 3.14D; 老鸟建议 浮点类型float，double的数据不适合在不容许舍入误差的金融计算领域。如果需要进行不产生舍入误差的精确数字计算，需要使用BigDecimal类。
【示例2-13】 浮点数的比较一
float f = 0.1f;double d = 1.</description>
    </item>
    
    <item>
      <title>2.6.1 整型变量/常量</title>
      <link>https://HarryQing.github.io/java/2.6.1-%E6%95%B4%E5%9E%8B%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Mon, 11 Jan 2021 12:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.6.1-%E6%95%B4%E5%9E%8B%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F/</guid>
      <description>整型用于表示没有小数部分的数值，它允许是负数。整型的范围与运行Java代码的机器无关，这正是Java程序具有很强移植能力的原因之一。与此相反，C和C++程序需要针对不同的处理器选择最有效的整型。
   类型 占用存储空间 表数范围     byte 1字节 -2^7 ~ 2^7-1（-128~127）   short 2字节 -2^15 ~ 2^15-1（-32768~32767）   int 4字节 -2^31 ~ 2^31-1 (-2147483648~2147483647)约21   long 8字节 -2^63 ~ 2^63-1    Java 语言整型常量的四种表示形式 十进制整数，如：99, -500, 0 八进制整数，要求以 0 开头，如：015 十六进制数，要求 0x 或 0X 开头，如：0x15 二进制数，要求0b或0B开头，如：0b01110011 Java语言的整型常数默认为int型，声明long型常量可以后加‘ l ’或‘ L ’ 。
【示例2-10】 长整型常数的声明
long a = 55555555; //编译成功，在int表示的范围内(21亿内)。long b = 55555555555;//不加L编译错误，已经超过int表示的范围。 我们修改成long类型的常量即可：</description>
    </item>
    
    <item>
      <title>2.6 基本数据类型(primitive data type)</title>
      <link>https://HarryQing.github.io/java/2.6-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bprimitive-data-type/</link>
      <pubDate>Mon, 11 Jan 2021 09:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.6-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bprimitive-data-type/</guid>
      <description>Java是一种强类型语言，每个变量都必须声明其数据类型。 Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。
Java中定义了3类8种基本数据类型 数值型－ byte、 short、int、 long、float、 double 字符型－ char 布尔型－boolean 注意事项 1.引用数据类型的大小统一为4个字节，记录的是其引用对象的地址！
2.本章只讲解基本数据类型。引用数据类型在后续数组和面向对象章节讲解。</description>
    </item>
    
    <item>
      <title>2.5 常量(Constant)</title>
      <link>https://HarryQing.github.io/java/2.5-%E5%B8%B8%E9%87%8Fconstant/</link>
      <pubDate>Mon, 11 Jan 2021 05:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.5-%E5%B8%B8%E9%87%8Fconstant/</guid>
      <description>常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。
在Java语言中，主要是利用关键字final来定义一个常量。 常量一旦被初始化后不能再更改其值。
声明格式为： final type varName = value; 【示例2-9】 常量的声明及使用
public class TestConstants {public static void main(String[] args) {final double PI = 3.14;// PI = 3.15; //编译错误，不能再被赋值！ double r = 4;double area = PI * r * r;double circle = 2 * PI * r;System.out.println(&amp;quot;area = &amp;quot; + area);System.out.println(&amp;quot;circle = &amp;quot; + circle);}} 为了更好的区分和表述，一般将1、2、3、’a’、’b’、true、false、”helloWorld”等称为字面常量，而使用final修饰的PI等称为符号常量。
老鸟建议 变量和常量命名规范（规范是程序员的基本准则，不规范会直接损害你的个人形象）：
1.所有变量、方法、类名：见名知意
2.类成员变量：首字母小写和驼峰原则: monthSalary</description>
    </item>
    
    <item>
      <title>2.4.2 变量的分类</title>
      <link>https://HarryQing.github.io/java/2.4.2-%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB/</link>
      <pubDate>Sat, 09 Jan 2021 19:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.4.2-%E5%8F%98%E9%87%8F%E7%9A%84%E5%88%86%E7%B1%BB/</guid>
      <description>从整体上可将变量划分为局部变量、成员变量(也称为实例变量)和静态变量。
   类型 声明位置 从属于 生命周期     局部变量 方法或语句块内部 方法/语句块 从声明位置开始，直到方法或语句块执行完毕，局部变量消失   成员变量(实例变量) 类内部，方法外部 对象 对象创建，成员变量也跟着创建。对象消失，成员变量也跟着消失；   静态变量(类变量) 类内部，static修饰 类 类被加载，静态变量就有效；类被卸载，静态变量消失。    老鸟建议 成员变量和静态变量不是目前重点，不要过多纠结理解与否。我们学习面向对象时，再重点讲解成员变量和静态变量
· 局部变量(local variable) 方法或语句块内部定义的变量。生命周期是从声明位置开始到到方法或语句块执行完毕为止。局部变量在使用前必须先声明、初始化(赋初值)再使用。
【示例2-7】 局部变量
public void test() {int i;int j = i+5 ; // 编译出错，变量i还未被初始化 } public void test() {int i;i=10;int j = i+5 ; // 编译正确} · 成员变量（也叫实例变量 member variable） 方法外部、类的内部定义的变量。从属于对象，生命周期伴随对象始终。如果不自行初始化，它会自动初始化成该类型的默认初始值。</description>
    </item>
    
    <item>
      <title>2.4.1 变量的本质</title>
      <link>https://HarryQing.github.io/java/2.4.1-%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8/</link>
      <pubDate>Sat, 09 Jan 2021 15:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.4.1-%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid>
      <description>变量本质上就是代表一个”可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。
Java是一种强类型语言，每个变量都必须声明其数据类型。变量的数据类型决定了变量占据存储空间的大小。 比如，int a=3; 表示a变量的空间大小为4个字节。
变量作为程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储空间。
·变量的声明 格式为：
 type varName [=value][,varName[=value]&amp;hellip;];
//[]中的内容为可选项，即可有可无
数据类型 变量名 [=初始值] [,变量名 [=初始值]…];
 【示例2-4】 声明变量：
double salary;long earthPopulation;int age; 不同数据类型的常量会在内存中分配不同的空间，如图所示。
注意事项 1.每个变量都有类型，类型可以是基本类型，也可以是引用类型。
2.变量名必须是合法的标识符
3.变量声明是一条完整的语句，因此每一个声明都必须以分号结束
【示例2-5】 在一行中声明多个变量
int i ,j; // 两个变量的数据类型都是int 老鸟建议 不提倡这种&amp;quot;一行声明多个变量&amp;quot;风格，逐一声明每一个变量可以提高程序可读性。
【示例2-6】 可以将变量的声明和初始化放在同一行中
int age = 18; double e = 2.718281828; </description>
    </item>
    
    <item>
      <title>2.3 Java中的关键字/保留字</title>
      <link>https://HarryQing.github.io/java/2.3-java%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97~%E4%BF%9D%E7%95%99%E5%AD%97/</link>
      <pubDate>Sat, 09 Jan 2021 12:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.3-java%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97~%E4%BF%9D%E7%95%99%E5%AD%97/</guid>
      <description>Java关键字是Java语言保留供内部使用的，如class用于定义类。 关键字也可以称为保留字，它们的意思是一样的，我们不能使用关键字作为变量名或方法名。
abstract assert boolean break byte case
catch char class const continue default
do double else extends final finally
float for goto if implements import
instanceof int interface long native new
菜鸟雷区 出于应试教育的惯性思维，很多新手很可能去背上面的单词，从实战思维出发，我们不需要刻意去记！随着学习的深入，自然就非常熟悉了。</description>
    </item>
    
    <item>
      <title>2.2 标识符</title>
      <link>https://HarryQing.github.io/java/2.2-%E6%A0%87%E8%AF%86%E7%AC%A6/</link>
      <pubDate>Sat, 09 Jan 2021 09:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.2-%E6%A0%87%E8%AF%86%E7%AC%A6/</guid>
      <description>标识符是用来给变量、类、方法以及包进行命名的，如Welcome、main、System、age、name、gender等。标识符需要遵守一定的规则：
1.标识符必须以字母、下划线_、美元符号$开头。 2.标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。 3.Java 标识符大小写敏感，且长度无限制。 4.标识符不可以是Java的关键字。 标识符的使用规范 1.表示类名的标识符：每个单词的首字母大写，如Man, GoodMan
2.表示方法和变量的标识符：第一个单词小写，从第二个单词开始首字母大写，我们称之为“驼峰原则”，如eat(), eatFood()
【注意】：Java不采用通常语言使用的ASCII字符集，而是采用Unicode这样标准的国际字符集。因此，这里字母的含义不仅仅是英文，还包括汉字等等。但是不建议大家使用汉字来定义标识符！
【示例2-2】合法的标识符
int a = 3;int _123 = 3;int $12aa = 3;int 变量1 = 55; //合法，但是不建议使用中文命名的标识符 【示例2-3】不合法的标识符
int 1a = 3; //不能用数字开头int a# = 3; //不能包含#这样的特殊字符int int = 3; //不能使用关键字 测试代码：
/*** 测试标识符的用法* @author 王雪庆**/public class TestIdentifer {//能力是练出来的，不是看书看出来的。对于初学者来说，再简单的代码也一定要敲一下！public static void main(String[] args) {int a123 = 1;//int 123abc = 2; //数字不能开头int $a = 3;int _abc = 4;//int #abc = 5;int 年龄 = 18; //可以使用汉字，但是一般不建议//int class = 2; //关键字不能作为标识符}} </description>
    </item>
    
    <item>
      <title>2.1 注释</title>
      <link>https://HarryQing.github.io/java/2.1-%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Sat, 09 Jan 2021 05:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.1-%E6%B3%A8%E9%87%8A/</guid>
      <description>为了方便程序的阅读，Java语言允许程序员在程序中写上一些说明性的文字，用来提高程序的可读性，这些文字性的说明就称为注释。 注释不会出现在字节码文件中，即Java编译器编译时会跳过注释语句。 在Java中根据注释的功能不同，主要分为单行注释、多行注释和文档注释。
单行注释： 使用“//”开头，“//”后面的单行内容均为注释。 多行注释： 以“/* ”开头以“* /”结尾，在“/* ”和“* /”之间的内容为注释，我们也可以使用多行注释作为行内注释。但是在使用时要注意，多行注释不能嵌套使用。 文档注释： 以“/** ”开头以“* /”结尾，注释中包含一些说明性的文字及一些JavaDoc标签(后期写项目时，可以生成项目的API) 【示例2-1】认识Java的三种注释类型
/*** Welcome类（我是文档注释）* @author 王雪庆* @version 1.0*/public class Welcome {//我是单行注释public static void main(String[] args/*我是行内注释 */) {System.out.println(&amp;quot;Hello World!&amp;quot;);}/*我是多行注释！我是多行注释！*/} </description>
    </item>
    
    <item>
      <title>第二章 数据类型和运算符</title>
      <link>https://HarryQing.github.io/java/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Tue, 05 Jan 2021 14:14:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>目录 2.1 注释 2.2 标识符 2.3 Java中的关键字/保留字 2.4.1 变量的本质 2.4.2 变量的分类 2.5 常量(Constant) 2.6 基本数据类型(primitive data type) 2.6.1 整型变量/常量 2.6.2 浮点型变量/常量 </description>
    </item>
    
  </channel>
</rss>
