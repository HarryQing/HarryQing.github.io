<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>王雪庆 on Mr.哈利-南山不寒</title>
    <link>https://HarryQing.github.io/tags/%E7%8E%8B%E9%9B%AA%E5%BA%86/</link>
    <description>Recent content in 王雪庆 on Mr.哈利-南山不寒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 03 Feb 2021 16:20:00 +0800</lastBuildDate><atom:link href="https://HarryQing.github.io/tags/%E7%8E%8B%E9%9B%AA%E5%BA%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1.1 if单选择结构</title>
      <link>https://HarryQing.github.io/posts/3.1.1-if%E5%8D%95%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 03 Feb 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/3.1.1-if%E5%8D%95%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</guid>
      <description>语法结构: if(布尔表达式){语句块} if语句对布尔表达式进行一次判定，若判定为真，则执行{}中的语句块，否则跳过该语句块。流程图如图3-1所示。
【示例3-1】 if单选择结构
public class Test1 {public static void main(String[] args) {//通过掷三个骰子看看今天的手气如何？int i = (int)(6 * Math.random()) + 1;//通过Math.random()产生随机数int j = (int)(6 * Math.random()) + 1;int k = (int)(6 * Math.random()) + 1;int count = i + j + k;//如果三个骰子之和大于15，则手气不错if(count &amp;gt; 15) {System.out.println(&amp;quot;今天手气不错&amp;quot;);}//如果三个骰子之和在10到15之间，则手气一般if(count &amp;gt;= 10 &amp;amp;&amp;amp; count &amp;lt;= 15) { //错误写法：10&amp;lt;=count&amp;lt;=15System.out.println(&amp;quot;今天手气很一般&amp;quot;);}//如果三个骰子之和小于10，则手气不怎么样if(count &amp;lt; 10) {System.</description>
    </item>
    
    <item>
      <title>3.0 控制语句</title>
      <link>https://HarryQing.github.io/posts/3.0-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Tue, 02 Feb 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/3.0-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid>
      <description>本章开始我们需要学习流程控制语句，流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。控制语句分为三类：顺序、选择和循环。
“顺序结构”代表“先执行a，再执行b”的逻辑。比如，先找个女朋友，再给女朋友打电话；先订婚，再结婚；
“选择结构”代表“如果…，则…”的逻辑。比如，如果女朋友来电，则迅速接电话；如果看到红灯，则停车；
“循环结构”代表“如果…，则再继续…”的逻辑。比如，如果没打通女朋友电话，则再继续打一次； 如果没找到喜欢的人，则再继续找。
前面两章讲解的程序都是顺序结构，即按照书写顺序执行每一条语句，这并不是我们的重点，因此本章研究的重点是“选择结构”和“循环结构”。
很神奇的是，三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。实际上，任何软件和程序，小到一个练习，大到一个操作系统，本质上都是由“变量、选择语句、循环语句”组成。
这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。上述两种结构组成的程序可以解决全部的问题，所以任何一种高级语言都具备上述两种结构。
因此，本章是大家真正跨入编程界的“门槛”，是成为“程序猿”的“门票”。 本章后面会附加大量的练习，供大家提升自我。</description>
    </item>
    
    <item>
      <title>3.1 选择结构</title>
      <link>https://HarryQing.github.io/posts/3.1-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 02 Feb 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/3.1-%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</guid>
      <description>在还没有知道Java选择结构的时候，我们编写的程序总是从程序入口开始，顺序执行每一条语句直到执行完最后一条语句结束，但是生活中经常需要进行条件判断，根据判断结果决定是否做一件事情，这就需要选择结构。
选择结构用于判断给定的条件，然后根据判断的结果来控制程序的流程。
主要的选择结构有：if选择结构和switch多选择结构。有如下结构：
 1.if单选择结构2.if-else双选择结构3.if-else if-else多选择结构4.switch结构 </description>
    </item>
    
    <item>
      <title>第三章 控制语句</title>
      <link>https://HarryQing.github.io/posts/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 01 Feb 2021 17:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid>
      <description>目录 3.0 控制语句 </description>
    </item>
    
    <item>
      <title>2.9 简单的键盘输入和输出</title>
      <link>https://HarryQing.github.io/posts/2.9-%E7%AE%80%E5%8D%95%E7%9A%84%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 01 Feb 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/2.9-%E7%AE%80%E5%8D%95%E7%9A%84%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</guid>
      <description>为了我们能写出更加复杂的程序，可以让我们的程序和用户可以通过键盘交互，我们先学习一下简单的键盘输入和输出。
【示例2-31】 使用Scanner获取键盘输入
import java.util.Scanner;/*** 测试获得键盘输入* @author 高**/public class TestScanner {public static void main(String[] args) {Scanner scanner = new Scanner(System.in);System.out.println(&amp;quot;请输入名字：&amp;quot;);String name = scanner.nextLine();System.out.println(&amp;quot;请输入你的爱好：&amp;quot;);String favor = scanner.nextLine();System.out.println(&amp;quot;请输入你的年龄：&amp;quot;);int age = scanner.nextInt();System.out.println(&amp;quot;###############&amp;quot;);System.out.println(name);System.out.println(favor);System.out.println(&amp;quot;来到地球的天数：&amp;quot;+age*365);System.out.println(&amp;quot;离开地球的天数：&amp;quot;+(72-age)*365);}} 运行结果如图所示 </description>
    </item>
    
    <item>
      <title>2.8.3 基本类型转化时常见错误和问题</title>
      <link>https://HarryQing.github.io/posts/2.8.3-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E6%97%B6%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%92%8C%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 31 Jan 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/2.8.3-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E6%97%B6%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%92%8C%E9%97%AE%E9%A2%98/</guid>
      <description>操作比较大的数时，要留意是否溢出，尤其是整数操作时。
【示例2-29】 常见问题一
int money = 1000000000; //10亿int years = 20;//返回的total是负数，超过了int的范围int total = money*years;System.out.println(&amp;quot;total=&amp;quot;+total);//返回的total仍然是负数。默认是int，因此结果会转成int值，再转成long。但是已经发生//了数据丢失long total1 = money*years; System.out.println(&amp;quot;total1=&amp;quot;+total1);//返回的total2正确:先将一个因子变成long，整个表达式发生提升。全部用long来计算。long total2 = money*((long)years); System.out.println(&amp;quot;total2=&amp;quot;+total2); 运行结果如图所示。 L和l 的问题： 不要命名名字为l的变量，l容易和1混淆。long类型使用大写L不要用小写。
【示例2-30】 常见问题二
 int l = 2; //分不清是L还是1,long a = 23451l;//建议使用大写LSystem.out.println(l+1); </description>
    </item>
    
    <item>
      <title>2.8.2 强制类型转换</title>
      <link>https://HarryQing.github.io/posts/2.8.2-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sat, 30 Jan 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/2.8.2-%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>强制类型转换，又被称为造型，用于显式的转换一个数值的类型。在有可能丢失信息的情况下进行的转换是通过造型来完成的，但可能造成精度降低或溢出。
语法格式： (type)var 运算符“()”中的type表示将值var想要转换成的目标数据类型。
【示例2-27】 强制类型转换
double x = 3.14; int nx = (int)x; //值为3char c = &#39;a&#39;;int d = c+1;System.out.println(nx);System.out.println(d);System.out.println((char)d); 运行结果如图所示。 当将一种类型强制转换成另一种类型，而又超出了目标类型的表数范围，就会被截断成为一个完全不同的值。
【示例2-28】 强制类型转换特例
int x = 300;byte bx = (byte)x; //值为44 新手雷区 不能在布尔类型和任何数值类型之间做强制类型转换</description>
    </item>
    
    <item>
      <title>2.8.1 自动类型转换</title>
      <link>https://HarryQing.github.io/posts/2.8.1-%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 29 Jan 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/2.8.1-%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>自动类型转换指的是容量小的数据类型可以自动转换为容量大的数据类型。如图2-6所示，黑色的实线表示无数据丢失的自动类型转换，而虚线表示在转换时可能会有精度的损失。
图 自动类型转换 可以将整型常量直接赋值给byte、 short、 char等类型变量，而不需要进行强制类型转换，只要不超出其表数范围即可。
【示例2-26】 自动类型转换特例
short b = 12; //合法short b = 1234567;//非法，1234567超出了short的表数范围 </description>
    </item>
    
    <item>
      <title>2.7.8 运算符优先级的问题</title>
      <link>https://HarryQing.github.io/posts/2.7.8-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 28 Jan 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/2.7.8-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>表 运算符的优先级    优先级 运算符 类 结合性     1 () 括号运算符 由左至右   2 !、+（正号）、-（负号） 一元运算符 由左至右   2 ~ 位逻辑运算符 由右至左   2 ++、&amp;ndash; 递增与递减运算符 由右至左   3 *、/、% 算术运算符 由左至右   4 +、- 算术运算符 由左至右   5 &amp;laquo;、&amp;raquo; 位左移、右移运算符 由左至右   6 &amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;= 关系运算符 由左至右   7 ==、!= 关系运算符 由左至右   8 &amp;amp; 位运算符、逻辑运算符 由左至右   9 ^ 位运算符、逻辑运算符 由左至右   10 | 位运算符、逻辑运算符 由左至右   11 &amp;amp;&amp;amp; 逻辑运算符 由左至右   12 || 逻辑运算符 由左至右   13 ?</description>
    </item>
    
    <item>
      <title>2.7.7 条件运算符</title>
      <link>https://HarryQing.github.io/posts/2.7.7-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 27 Jan 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/2.7.7-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>语法格式： x ? y : z 其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个运算的结果为表达式 y 的值，否则整个运算结果为表达式 z 的值。
【示例2-25】 三目条件运算符
 int score = 80; int x = -100;String type =score&amp;lt;60?&amp;quot;不及格&amp;quot;:&amp;quot;及格&amp;quot;; int flag = x &amp;gt; 0 ? 1 : (x == 0 ? 0 : -1);System.out.println(&amp;quot;type= &amp;quot; + type);System.out.println(&amp;quot;flag= &amp;quot;+ flag); </description>
    </item>
    
  </channel>
</rss>
