<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mr.哈利-南山不寒</title>
    <link>https://HarryQing.github.io/</link>
    <description>Recent content on Mr.哈利-南山不寒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 14 Mar 2021 00:20:00 +0800</lastBuildDate><atom:link href="https://HarryQing.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hugo博客上传</title>
      <link>https://HarryQing.github.io/blog/hugo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Sun, 14 Mar 2021 00:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/blog/hugo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/</guid>
      <description>博客文件夹右击（Git Bush Here）
打开public文件，用vc打开
在终端依次输入
hugo
git init
git add -A
git commit -am&amp;quot;init&amp;quot;
git branch -M main
git remote add origin https://github.com/HarryQing/HarryQing.github.io.git
git push -f origin main</description>
    </item>
    
    <item>
      <title>如何将本地图片转成链接？</title>
      <link>https://HarryQing.github.io/blog/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%BD%AC%E6%88%90%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sat, 13 Mar 2021 23:10:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/blog/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%BD%AC%E6%88%90%E9%93%BE%E6%8E%A5/</guid>
      <description>第一步 打开浏览器，在地址栏中输入链接：https://sm.ms/
第二步 选择如下图中的 Select Image(s) 进行上传图片；
第三步 上传完后，会显示图片，然后点击Upload选项即可；
第四步 生成好的链接，会在Preview选项中有HTML、Markdown等各种；
第五步 这里我们选择Image URL即可看到生成好的 URL 链接。</description>
    </item>
    
    <item>
      <title>第五章 Java面对对象进阶</title>
      <link>https://HarryQing.github.io/posts/%E7%AC%AC%E4%BA%94%E7%AB%A0-java%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Mon, 01 Mar 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/%E7%AC%AC%E4%BA%94%E7%AB%A0-java%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</guid>
      <description>敬请期待 别急喔小可爱！ </description>
    </item>
    
    <item>
      <title>4.13.3 静态导入</title>
      <link>https://HarryQing.github.io/posts/4.13.3-%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5/</link>
      <pubDate>Sun, 28 Feb 2021 20:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.13.3-%E9%9D%99%E6%80%81%E5%AF%BC%E5%85%A5/</guid>
      <description>　静态导入(static import)是在JDK1.5新增加的功能，其作用是用于导入指定类的静态属性，这样我们可以直接使用静态属性。
【示例4-16】 静态导入的使用　package cn.sxt;//以下两种静态导入的方式二选一即可import static java.lang.Math.*;//导入Math类的所有静态属性import static java.lang.Math.PI;//导入Math类的PI属性public class Test2{public static void main(String [] args){System.out.println(PI);System.out.println(random());}} 　执行结果如图4-15所示。 </description>
    </item>
    
    <item>
      <title>4.13.2 导入类import</title>
      <link>https://HarryQing.github.io/posts/4.13.2-%E5%AF%BC%E5%85%A5%E7%B1%BBimport/</link>
      <pubDate>Sun, 28 Feb 2021 17:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.13.2-%E5%AF%BC%E5%85%A5%E7%B1%BBimport/</guid>
      <description>　如果我们要使用其他包的类，需要使用import导入，从而可以在本类中直接通过类名来调用，否则就需要书写类的完整包名和类名。import后，便于编写代码，提高可维护性。
注意要点： 　1. Java会默认导入java.lang包下所有的类，因此这些类我们可以直接使用。
　2. 如果导入两个同名的类，只能用包名+类名来显示调用相关类：　java.util.Date date = new java.util.Date(); 【示例4-15】 导入同名类的处理　import java.sql.Date;import java.util.*;//导入该包下所有的类。会降低编译速度，但不会降低运行速度。public class Test{public static void main(String[] args) {//这里指的是java.sql.DateDate now; //java.util.Date因为和java.sql.Date类同名，需要完整路径java.util.Date now2 = new java.util.Date();System.out.println(now2); //java.util包的非同名类不需要完整路径Scanner input = new Scanner(System.in); }} </description>
    </item>
    
    <item>
      <title>4.13.1 JDK中的主要包</title>
      <link>https://HarryQing.github.io/posts/4.13.1-jdk%E4%B8%AD%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%85/</link>
      <pubDate>Sun, 28 Feb 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.13.1-jdk%E4%B8%AD%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%85/</guid>
      <description></description>
    </item>
    
    <item>
      <title>4.13 package</title>
      <link>https://HarryQing.github.io/posts/4.13-package/</link>
      <pubDate>Sat, 27 Feb 2021 23:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.13-package/</guid>
      <description>我们通过package实现对类的管理，package的使用有两个要点：
　1. 通常是类的第一句非注释性语句。
　2. 包名：域名倒着写即可，再加上模块名，便于内部管理类。
【示例4-13】 package的命名举例
com.sun.test;com.oracle.test;cn.sxt.gao.test;cn.sxt.gao.view;cn.sxt.gao.view.model; 注意事项： 　1. 写项目时都要加包，不要使用默认包。
　2. com.gao和com.gao.car，这两个包没有包含关系，是两个完全独立的包。只是逻辑上看起来后者是前者的一部分。
【示例4-14】 package的使用
package cn.sxt;public class Test {public static void main(String[] args) {System.out.println(&amp;quot;helloworld&amp;quot;);}} ·在eclipse项目中新建包 　在src目录上单击右键，选择new-&amp;gt;package
图4-13 创建package
　在package窗口上输入包名即可
图4-14 指定包名称
　接下来，我们就可以在包上单击右键，新建类啦!</description>
    </item>
    
    <item>
      <title>4.12 包</title>
      <link>https://HarryQing.github.io/posts/4.12-%E5%8C%85/</link>
      <pubDate>Sat, 27 Feb 2021 22:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.12-%E5%8C%85/</guid>
      <description>包机制是Java中管理类的重要手段。 开发中，我们会遇到大量同名的类，通过包我们很容易对解决类重名的问题，也可以实现对类的有效管理。 包对于类，相当于文件夹对于文件的作用。</description>
    </item>
    
    <item>
      <title>4.11 参数传值机制</title>
      <link>https://HarryQing.github.io/posts/4.11-%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 27 Feb 2021 20:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.11-%E5%8F%82%E6%95%B0%E4%BC%A0%E5%80%BC%E6%9C%BA%E5%88%B6/</guid>
      <description>Java中，方法中所有参数都是“值传递”，也就是“传递的是值的副本”。 也就是说，我们得到的是“原参数的复印件，而不是原件”。因此，复印件改变不会影响原件。
· 基本数据类型参数的传值 　传递的是值的副本。 副本改变不会影响原件。
· 引用类型参数的传值 　传递的是值的副本。但是引用类型指的是“对象的地址”。因此，副本和原参数都指向了同一个“地址”，改变“副本指向地址对象的值，也意味着原参数指向对象的值也发生了改变”。
【示例4-12】 多个变量指向同一个对象
/*** 测试参数传值机制* @author 王雪庆**/public class User4 {int id; //idString name; //账户名String pwd; //密码public User4(int id, String name) {this.id = id;this.name = name;}public void testParameterTransfer01(User4 u){u.name=&amp;quot;王雪庆&amp;quot;;}public void testParameterTransfer02(User4 u){u = new User4(200,&amp;quot;王永庆&amp;quot;);}public static void main(String[] args) {User4 u1 = new User4(100, &amp;quot;张雪&amp;quot;);u1.</description>
    </item>
    
    <item>
      <title>4.10 静态初始化块</title>
      <link>https://HarryQing.github.io/posts/4.10-%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97/</link>
      <pubDate>Sat, 27 Feb 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/4.10-%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97/</guid>
      <description>　构造方法用于对象的初始化!静态初始化块，用于类的初始化操作!在静态初始化块中不能直接访问非static成员。
注意事项： 　静态初始化块执行顺序(学完继承再看这里)：
　1. 上溯到Object类，先执行Object的静态初始化块，再向下执行子类的静态初始化块，直到我们的类的静态初始化块为止。
　2. 构造方法执行顺序和上面顺序一样!!
【示例4-11】 static初始化块
public class User3 {int id; //idString name; //账户名String pwd; //密码static String company; //公司名称static {System.out.println(&amp;quot;执行类的初始化工作&amp;quot;);company = &amp;quot;王雪庆&amp;quot;;printCompany();} public static void printCompany(){System.out.println(company);} public static void main(String[] args) {User3 u3 = new User3();}} </description>
    </item>
    
  </channel>
</rss>
