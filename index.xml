<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mr.哈利-南山不寒</title>
    <link>https://HarryQing.github.io/</link>
    <description>Recent content on Mr.哈利-南山不寒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 23 Jan 2021 23:06:06 +0800</lastBuildDate><atom:link href="https://HarryQing.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Hugo搭建个人博客（一）</title>
      <link>https://HarryQing.github.io/blog/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/</link>
      <pubDate>Sat, 23 Jan 2021 23:06:06 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/blog/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%80/</guid>
      <description>安装Hugo 1.从 hugo 的GitHub 仓库下载安装包，使用即可。我使用的是hugo_0.80.0_Windows-64bit.zip这个版本。
2.建立一个文档blog，该文档中建立一个bin文件夹，将解压的hugo文件放进去，之后复制其全链接（路径）我的是H:\boke\bin。
3.打开控制面板，打开查看高级系统设置，点击里面的环境变量，在A的用户变量（U里面找到path变量，双击在里面添加之前复制的全链接H:\boke\bin，之后点确定；下面的系统变量（S同上。
4.打开系统的cmd（命令提示符），输入
 hugo version
 5.显示Hugo版本信息。
 C:\Users\A&amp;gt;hugo version Hugo Static Site Generator v0.78.2-959724F0 windows/amd64 BuildDate: 2020-11-13T10:08:15Z
 6.Hugo安装完成
创建一个站点 1.在cmd（命令提示符）输入
 hogo new site yourname.com(yourname自定义)
 2.创建完成即生成你的博客目录，目录如下：
 ├─archetypes ├─content ├─data ├─layouts ├─static ├─themes └─config.toml
 挑选一个主题 1.在Hugo的 主题网站https://themes.gohugo.io/中挑选一款你喜欢的主题。
2.选定后，将其下载好为一个文件夹（以我的为例：文件夹名为hermit）
3.打开创建的站点的文件夹，找到theme文件夹将下载好的主题文件夹放进去hermit（若文件夹后面有master删掉，避免后面的麻烦），添加好后打开hermit文件夹，找到exampleSite，复制里面的content和comfig.toml，替换掉外层（yourname.com这层）的content和comfig.toml。
调试并实现本地查看 1.下载一个VS Studio网址https://code.visualstudio.com/。
2.使用VS Studio打开站点文件夹（yourname.com）
3.在其终端输入命令
 hugo server
 得到结果
 C:\Users\A\foreversnow.com&amp;gt; hugo server Start building sites …
 | EN  &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;ndash; Pages | 15 Paginator pages | 0 Non-page files | 0</description>
    </item>
    
    <item>
      <title>2.3 Java中的关键字/保留字</title>
      <link>https://HarryQing.github.io/java/2.3-java%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97~%E4%BF%9D%E7%95%99%E5%AD%97/</link>
      <pubDate>Sat, 09 Jan 2021 12:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.3-java%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97~%E4%BF%9D%E7%95%99%E5%AD%97/</guid>
      <description>Java关键字是Java语言保留供内部使用的，如class用于定义类。 关键字也可以称为保留字，它们的意思是一样的，我们不能使用关键字作为变量名或方法名。
abstract assert boolean break byte case
catch char class const continue default
do double else extends final finally
float for goto if implements import
instanceof int interface long native new
菜鸟雷区 出于应试教育的惯性思维，很多新手很可能去背上面的单词，从实战思维出发，我们不需要刻意去记！随着学习的深入，自然就非常熟悉了。</description>
    </item>
    
    <item>
      <title>2.2 标识符</title>
      <link>https://HarryQing.github.io/java/2.2-%E6%A0%87%E8%AF%86%E7%AC%A6/</link>
      <pubDate>Sat, 09 Jan 2021 09:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.2-%E6%A0%87%E8%AF%86%E7%AC%A6/</guid>
      <description>标识符是用来给变量、类、方法以及包进行命名的，如Welcome、main、System、age、name、gender等。标识符需要遵守一定的规则：
1.标识符必须以字母、下划线_、美元符号$开头。 2.标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。 3.Java 标识符大小写敏感，且长度无限制。 4.标识符不可以是Java的关键字。 标识符的使用规范 1.表示类名的标识符：每个单词的首字母大写，如Man, GoodMan
2.表示方法和变量的标识符：第一个单词小写，从第二个单词开始首字母大写，我们称之为“驼峰原则”，如eat(), eatFood()
【注意】：Java不采用通常语言使用的ASCII字符集，而是采用Unicode这样标准的国际字符集。因此，这里字母的含义不仅仅是英文，还包括汉字等等。但是不建议大家使用汉字来定义标识符！
【示例2-2】合法的标识符
int a = 3;int _123 = 3;int $12aa = 3;int 变量1 = 55; //合法，但是不建议使用中文命名的标识符 【示例2-3】不合法的标识符
int 1a = 3; //不能用数字开头int a# = 3; //不能包含#这样的特殊字符int int = 3; //不能使用关键字 测试代码：
/*** 测试标识符的用法* @author 王雪庆**/public class TestIdentifer {//能力是练出来的，不是看书看出来的。对于初学者来说，再简单的代码也一定要敲一下！public static void main(String[] args) {int a123 = 1;//int 123abc = 2; //数字不能开头int $a = 3;int _abc = 4;//int #abc = 5;int 年龄 = 18; //可以使用汉字，但是一般不建议//int class = 2; //关键字不能作为标识符}} </description>
    </item>
    
    <item>
      <title>2.1 注释</title>
      <link>https://HarryQing.github.io/java/2.1-%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Sat, 09 Jan 2021 05:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/2.1-%E6%B3%A8%E9%87%8A/</guid>
      <description>为了方便程序的阅读，Java语言允许程序员在程序中写上一些说明性的文字，用来提高程序的可读性，这些文字性的说明就称为注释。 注释不会出现在字节码文件中，即Java编译器编译时会跳过注释语句。 在Java中根据注释的功能不同，主要分为单行注释、多行注释和文档注释。
单行注释： 使用“//”开头，“//”后面的单行内容均为注释。 多行注释： 以“/* ”开头以“* /”结尾，在“/* ”和“* /”之间的内容为注释，我们也可以使用多行注释作为行内注释。但是在使用时要注意，多行注释不能嵌套使用。 文档注释： 以“/** ”开头以“* /”结尾，注释中包含一些说明性的文字及一些JavaDoc标签(后期写项目时，可以生成项目的API) 【示例2-1】认识Java的三种注释类型
/*** Welcome类（我是文档注释）* @author 王雪庆* @version 1.0*/public class Welcome {//我是单行注释public static void main(String[] args/*我是行内注释 */) {System.out.println(&amp;quot;Hello World!&amp;quot;);}/*我是多行注释！我是多行注释！*/} </description>
    </item>
    
    <item>
      <title>第二章 数据类型和运算符</title>
      <link>https://HarryQing.github.io/java/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Tue, 05 Jan 2021 14:14:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>欲知后事如何，等着吧您！ </description>
    </item>
    
    <item>
      <title>1.8 30分钟完成桌球小游戏项目</title>
      <link>https://HarryQing.github.io/java/1.8-30%E5%88%86%E9%92%9F%E5%AE%8C%E6%88%90%E6%A1%8C%E7%90%83%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 05 Jan 2021 09:14:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/1.8-30%E5%88%86%E9%92%9F%E5%AE%8C%E6%88%90%E6%A1%8C%E7%90%83%E5%B0%8F%E6%B8%B8%E6%88%8F%E9%A1%B9%E7%9B%AE/</guid>
      <description>如下的小项目，对于第一次接触编程的朋友从理解上会有难度。但是，我们这个项目不在于让大家理解代码本身，而是让大家“重在体验敲代码的感觉”。
【项目】桌球游戏小项目 练习目标： 1.找到敲代码的感觉
2.收获敲代码的兴趣
3.作出效果，找到自信
4.从一开始就学会调试错误
5.掌握Java代码基本结构
项目需求： 桌球在球桌中按照一定线路和角度移动，遇到边框会自动弹回。
要求： 即使看不太懂，也要照着敲如下游戏代码，至少5遍。要求所有字符和源文件一致。如果报异常，请细心看所在行和老师代码有何区别。现阶段不需要理解代码的语法功能，只要按照代码结构输入代码，能够经过调试实现代码的正常运行即可。
项目中用到的两个小图片，如下：
开发步骤： 版本1： 目标：创建项目、创建窗口。
创建项目并拷贝图片：
在项目名MyPro01上单击右键，在菜单中依次选择new&amp;mdash;Folder，创建一个名称是images的文件夹，并复制两 张图片到该目录下。并在src下创建类BallGame.java。eclipse下项目的最终结构如图所示。
代码：
import java.awt.*;import javax.swing.*;public class BallGame extends JFrame {//窗口加载void launchFrame(){setSize(300,300);setLocation(400,400);setVisible(true);}//main方法是程序执行的入口public static void main(String[] args){System.out.println(&amp;quot; 我是尚学堂高淇，这个游戏项目让大家体验编程的快感，寓教于乐！&amp;quot;);BallGame game = new BallGame();game.launchFrame();}} 运行效果：
版本2： 目标：加载两个图片
代码：
import java.awt.*;import javax.swing.*;public class BallGame extends JFrame {Image ball = Toolkit.</description>
    </item>
    
    <item>
      <title>1.7.3 使用eclipse开发和运行Java程序</title>
      <link>https://HarryQing.github.io/java/1.7.3-%E4%BD%BF%E7%94%A8eclipse%E5%BC%80%E5%8F%91%E5%92%8C%E8%BF%90%E8%A1%8Cjava%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 05 Jan 2021 05:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/1.7.3-%E4%BD%BF%E7%94%A8eclipse%E5%BC%80%E5%8F%91%E5%92%8C%E8%BF%90%E8%A1%8Cjava%E7%A8%8B%E5%BA%8F/</guid>
      <description>·使用eclipse开发第一个程序 我们在上一节建好的Java项目中，开始开发Java程序。首先，新建一个Java类。在src目录上右键单击，建立一个Java类。如图1-32所示。
出现新建类的开始界面，如图所示。我们只需输入类名即可，其他不需做任何设置：
点击Finish后，新建Java类成功，出现如图所示
在src下面出现了Welcome.java文件。点击该文件后，出现该文件的代码编辑，我们开发Eclipse下的第一个Java程序。
【示例1-2】使用eclipse开发Java程序
public class Welcome {public static void main(String[] args) {System.out.println(&amp;quot;我是尚学堂的高淇！&amp;quot;);}} 运行该程序： 在代码上单击右键后，点击Run as Java application。如图所示。也可以使用快捷键“ctrl+F11”，直接实现运行。或者直接点击工具栏的中运行按钮。
界面下方的控制台（console）出现运行结果，如图所示。
至此，我们成功在eclipse中开发了我们的第一个Java程序！
·eclipse自动编译 eclipse会自动执行javac进行编译，并且会将编译错误直接给出提示，一目了然，非常便于我们调试。
·Java项目的src目录和bin目录 src用于存放源代码，bin用于存放生成的class文件。
在eclipse视图里我们只看到了src目录，eclipse隐藏了bin目录。进入我的电脑，打开Java项目目录，我们可以看到src和bin目录：</description>
    </item>
    
    <item>
      <title>1.7.2 在eclipse中创建Java项目</title>
      <link>https://HarryQing.github.io/java/1.7.2-%E5%9C%A8eclipse%E4%B8%AD%E5%88%9B%E5%BB%BAjava%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 04 Jan 2021 22:14:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/1.7.2-%E5%9C%A8eclipse%E4%B8%AD%E5%88%9B%E5%BB%BAjava%E9%A1%B9%E7%9B%AE/</guid>
      <description>在界面左侧的“Package Explorer”视图中右键单击，在快捷菜单中依次选择new——&amp;gt; Java Project，开始新建Java项目。如图所示。 输入项目名称MyPro01，点击Finish 完成即可。如图所示。
新建项目完成，项目结构如图所示。其中的src文件夹用于存放源代码。显示JDK版本是JavaSE-1.8。</description>
    </item>
    
    <item>
      <title>1.7.1 下载和安装eclipse</title>
      <link>https://HarryQing.github.io/java/1.7.1-%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85eclipse/</link>
      <pubDate>Mon, 04 Jan 2021 18:14:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/1.7.1-%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85eclipse/</guid>
      <description>下载地址：https://www.eclipse.org/downloads/packages/
出现图所示下载界面。选择Eclipse IDE for Java Developers，根据自己安装的JDK, 决定是下载32位还是64位。下载完成后，直接解压。进入目录，双击eclipse.exe即可使用。
启动时会先出现设置工作空间界面，如图所示。工作空间指Java项目存储的目录，一般采用默认工作空间目录即可。
点击OK后，会进入欢迎界面，如图所示。
关闭欢迎界面，即可进入开发主界面，如图所示。</description>
    </item>
    
    <item>
      <title>1.7 eclipse使用10分钟入门</title>
      <link>https://HarryQing.github.io/java/1.7-eclipse%E4%BD%BF%E7%94%A810%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 04 Jan 2021 13:14:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/java/1.7-eclipse%E4%BD%BF%E7%94%A810%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8/</guid>
      <description>在开发工具匮乏的年代，第一代Java程序员都是从文本编辑器开始训练自己的代码，从而一步步成为高手，这是一种无奈，而不是一种必须。
我们认为，现在横在入门初学者最大的障碍在于“是否能激发兴趣，解决问题，体验到编程的快乐”，而不是讨论是该用记事本还是eclipse集成开发环境。
是否使用或坚持记事本编程不是成为高手的必要条件，而“激发兴趣，保持兴趣”确是成为高手的必要条件。也基于我们的理念“快速入门，快速实战”，我们一开始就引入eclipse，让初学者更容易的激发兴趣，体验学习的快乐。</description>
    </item>
    
  </channel>
</rss>
