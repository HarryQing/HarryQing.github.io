<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mr.哈利-南山不寒</title>
    <link>https://HarryQing.github.io/</link>
    <description>Recent content on Mr.哈利-南山不寒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 18 Mar 2021 00:20:00 +0800</lastBuildDate><atom:link href="https://HarryQing.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.2Linux是什么，有哪些特点？</title>
      <link>https://HarryQing.github.io/linuxs/1.2linux%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9/</link>
      <pubDate>Thu, 18 Mar 2021 00:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/linuxs/1.2linux%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9/</guid>
      <description>与大家熟知的 Windows 操作系统软件一样，Linux 也是一个操作系统软件，其 logo 是一只企鹅（如图 1 所示）。与 Windows 不同之处在于，Linux 是一套开放源代码程序的、可以自由传播的类 Unix 操作系统软件。
　Linux 在设计之初，就是基于 Intel x86 系列 CPU 架构计算机的，它是一个基于 POSIX 的多用户、多任务并且支持多线程和多 CPU 的操作系统，它是由世界各地成千上万的程序员设计和开发实现的，当初开发 Linux 系统的目的就是建立不受任何商业化软件版权制约的、全世界都能自由使用的类 Unix 操作系统兼容产品。
　在过去的 20 年里，Linux 系统主要被应用于服务器端、嵌入式开发和 PC 桌面 3 大领域，其中服务器端领域是重中之重。例如，我们熟知的大型、超大型互联网企业（百度、腾讯、Sina、阿里等）都在使用 Linux 系统作为其服务器端的程序运行平台，全球及国内排名前 1000 的 90% 以上的网站使用的主流系统都是 Linux 系统。
从上面的内容可以看出，Linux操作系统之所以如此流行，是因为它具备如下这些优秀的特点： 　1.Linux 不仅是免费的，更是开源的， 这意味着任何人都可以获得其代码并根据自己的需求进行修改。事实上，这已经孵化出专属 Linux 各发行版的巨大生态系统，我们将在《常见Linux发行版本》一节中展开探讨。
　2.Linux 与 Unix 系统兼容， 该系统的构建采用了一些与 UNIX 操作系统相同的技术，具备 Unix 几乎所有的优秀特性（系统的稳定性和安全性尤为突出）。
　3.和其他操作系统相比，Linux 更容易安装 ，且不会收到任何商业化版本的制约。
　4.Linux 让开展各种实际有用且具有创造性的事情成为可能。 例如，我们可以在一个U盘上装载 Linux 的自生系统引导映像（live boot image），启动一台硬盘已经崩溃的计算机，之后查找并解决该问题。或者，因为 Linux 是一个真正的多用户操作系统，它具有非常好的私密性和稳定性，整个团队可以同时从本地或远程登录进行工作。</description>
    </item>
    
    <item>
      <title>markdown编辑器语法——文字颜色、大小、字体与背景色的设置</title>
      <link>https://HarryQing.github.io/blog/markdown%E7%BC%96%E8%BE%91%E5%99%A8%E8%AF%AD%E6%B3%95%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2%E5%A4%A7%E5%B0%8F%E5%AD%97%E4%BD%93%E4%B8%8E%E8%83%8C%E6%99%AF%E8%89%B2%E7%9A%84%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Wed, 17 Mar 2021 23:37:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/blog/markdown%E7%BC%96%E8%BE%91%E5%99%A8%E8%AF%AD%E6%B3%95%E6%96%87%E5%AD%97%E9%A2%9C%E8%89%B2%E5%A4%A7%E5%B0%8F%E5%AD%97%E4%BD%93%E4%B8%8E%E8%83%8C%E6%99%AF%E8%89%B2%E7%9A%84%E8%AE%BE%E7%BD%AE/</guid>
      <description>一、颜色 在markdown中采用如下方式能够控制文字的颜色：
浅红色文字：&amp;lt;font color=&amp;#34;#dd0000&amp;#34;&amp;gt;浅红色文字：&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 深红色文字：&amp;lt;font color=&amp;#34;#660000&amp;#34;&amp;gt;深红色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 浅绿色文字：&amp;lt;font color=&amp;#34;#00dd00&amp;#34;&amp;gt;浅绿色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 深绿色文字：&amp;lt;font color=&amp;#34;#006600&amp;#34;&amp;gt;深绿色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 浅蓝色文字：&amp;lt;font color=&amp;#34;#0000dd&amp;#34;&amp;gt;浅蓝色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 深蓝色文字：&amp;lt;font color=&amp;#34;#000066&amp;#34;&amp;gt;深蓝色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 浅黄色文字：&amp;lt;font color=&amp;#34;#dddd00&amp;#34;&amp;gt;浅黄色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 深黄色文字：&amp;lt;font color=&amp;#34;#666600&amp;#34;&amp;gt;深黄色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 浅青色文字：&amp;lt;font color=&amp;#34;#00dddd&amp;#34;&amp;gt;浅青色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 深青色文字：&amp;lt;font color=&amp;#34;#006666&amp;#34;&amp;gt;深青色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 浅紫色文字：&amp;lt;font color=&amp;#34;#dd00dd&amp;#34;&amp;gt;浅紫色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 深紫色文字：&amp;lt;font color=&amp;#34;#660066&amp;#34;&amp;gt;深紫色文字&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 效果如下： 二、大小 size为1：&amp;lt;font size=&amp;#34;1&amp;#34;&amp;gt;size为1&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; size为2：&amp;lt;font size=&amp;#34;2&amp;#34;&amp;gt;size为2&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; size为3：&amp;lt;font size=&amp;#34;3&amp;#34;&amp;gt;size为3&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; size为4：&amp;lt;font size=&amp;#34;4&amp;#34;&amp;gt;size为4&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; size为10：&amp;lt;font size=&amp;#34;10&amp;#34;&amp;gt;size为10&amp;lt;/font&amp;gt;&amp;lt;br /&amp;gt; 效果如下： 三、字体 &amp;lt;font face=&amp;#34;黑体&amp;#34;&amp;gt;我是黑体字&amp;lt;/font&amp;gt; &amp;lt;font face=&amp;#34;宋体&amp;#34;&amp;gt;我是宋体字&amp;lt;/font&amp;gt; &amp;lt;font face=&amp;#34;微软雅黑&amp;#34;&amp;gt;我是微软雅黑字&amp;lt;/font&amp;gt; &amp;lt;font face=&amp;#34;fantasy&amp;#34;&amp;gt;我是fantasy字&amp;lt;/font&amp;gt; &amp;lt;font face=&amp;#34;Helvetica&amp;#34;&amp;gt;我是Helvetica字&amp;lt;/font&amp;gt; 效果如下： 尝试了几个word中的字体都是可以的，我估计word中的字体基本都能够实现吧。
四、背景色 &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td bgcolor=#FF00FF&amp;gt;背景色的设置是按照十六进制颜色值：#7FFFD4&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt; &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td bgcolor=#FF83FA&amp;gt;背景色的设置是按照十六进制颜色值：#FF83FA&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt; &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td bgcolor=#D1EEEE&amp;gt;背景色的设置是按照十六进制颜色值：#D1EEEE&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt; &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td bgcolor=#C0FF3E&amp;gt;背景色的设置是按照十六进制颜色值：#C0FF3E&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt; &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td bgcolor=#54FF9F&amp;gt;背景色的设置是按照十六进制颜色值：#54FF9F&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt; 效果如下： </description>
    </item>
    
    <item>
      <title>1.1操作系统是什么，操作系统概述</title>
      <link>https://HarryQing.github.io/linuxs/1.1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 17 Mar 2021 23:12:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/linuxs/1.1%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
      <description>Linux 也是众多操作系统之一，要想知道 Linux 是什么，首先得说一说什么是操作系统。
　计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出（文字、图片、音频、视频等）。计算机由硬件和软件组成 ：
 1.硬件是计算机赖以工作的实体，包括显示器、键盘、鼠标、硬盘、CPU、主板等；
2.软件会按照用户的要求协调整台计算机的工作，比如 Windows、Linux、Mac OS、Android 等操作系统，以及 Office、QQ、迅雷、微信等应用程序。
 　操作系统（Operating System，OS） 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁（或者说接口、中间人、中介等）。
　操作系统会控制其他程序运行，管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序，例如：
1) 文件系统 　提供计算机存储信息的结构，信息存储在文件中，文件主要存储在计算机的内部硬盘里，在目录的分层结构中组织文件。文件系统为操作系统提供了组织管理数据的方式。
2) 设备驱动程序 　提供连接计算机的每个硬件设备的接口，设备驱动器使程序能够写入设备，而不需要了解执行每个硬件的细节。简单来说，就是让你能吃到鸡蛋，但不用养一只鸡。
3) 用户接口 　操作系统需要为用户提供一种运行程序和访问文件系统的方法。如常用的 Windows 图形界面，可以理解为一种用户与操作系统交互的方式；智能手机的 Android 或 iOS 系统，也是一种操作系统的交互方式。
4) 系统服务程序 　当计算机启动时，会自启动许多系统服务程序，执行安装文件系统、启动网络服务、运行预定任务等操作。
　打个比方，操作系统就好像是一个政府，其它软件都会被它管控；操作系统在给其他软件提供各种便利的同时，还会约束其他软件不能为所欲为。
　目前流行的服务器和 PC 端操作系统有 Linux、Windows、UNIX 等，手机操作系统有 Android、iOS、Windows Phone（简称 WP），嵌入式操作系统有 Windows CE、PalmOS、eCos、uClinux 等。
　以上对操作系统的认知虽然只是“皮毛”，但它足以让我们学习 Linux 了。</description>
    </item>
    
    <item>
      <title>第一章 Linux简介</title>
      <link>https://HarryQing.github.io/linuxs/%E7%AC%AC%E4%B8%80%E7%AB%A0-linux%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 17 Mar 2021 23:01:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/linuxs/%E7%AC%AC%E4%B8%80%E7%AB%A0-linux%E7%AE%80%E4%BB%8B/</guid>
      <description>一切皆有可能 新起点 新开始 加油 冲冲冲 </description>
    </item>
    
    <item>
      <title>hugo博客在GitHub上进行部署（二）</title>
      <link>https://HarryQing.github.io/blog/hugo%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E4%B8%8A%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2%E4%BA%8C/</link>
      <pubDate>Sun, 14 Mar 2021 00:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/blog/hugo%E5%8D%9A%E5%AE%A2%E5%9C%A8github%E4%B8%8A%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2%E4%BA%8C/</guid>
      <description>创建新文章 hugo new 你的文档名/你的文章名.md
创建库 1.名称一定是：你的用户名.github.io 2.选择本地存储复制
部署到云端 1.在config.toml中改参数 2.生成public: 打开文件根目录的cmd或git bash here输入
hugo 3.进入public 4.在该页面下打开git bash here 5.相继输入以下代码
git init git add -Agit commit -am&amp;quot;init&amp;quot;git branch -M maingit remote add origin https://github.com/你的用户名/你的用户名.github.io.git（假如是我：git remote add origin https://github.com/HarryQing/HarryQing.github.io.git）git push -f origin master（无响应则再次运行同一代码，最多两次）你的博客:https://你的用户名.github.io/假如是我的博客：https://harryqing.github.io/ 笔者 git initgit add -Agit commit -am&amp;quot;init&amp;quot;git branch -M maingit remote add origin https://github.com/HarryQing/HarryQing.github.io.gitgit push -f origin main </description>
    </item>
    
    <item>
      <title>如何将本地图片转成链接？</title>
      <link>https://HarryQing.github.io/blog/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%BD%AC%E6%88%90%E9%93%BE%E6%8E%A5/</link>
      <pubDate>Sat, 13 Mar 2021 23:10:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/blog/%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%BD%AC%E6%88%90%E9%93%BE%E6%8E%A5/</guid>
      <description>第一步 打开浏览器，在地址栏中输入链接：https://sm.ms/
第二步 选择如下图中的 Select Image(s) 进行上传图片；
第三步 上传完后，会显示图片，然后点击Upload选项即可；
第四步 生成好的链接，会在Preview选项中有HTML、Markdown等各种；
第五步 这里我们选择Image URL即可看到生成好的 URL 链接。</description>
    </item>
    
    <item>
      <title>第六章 异常机制</title>
      <link>https://HarryQing.github.io/posts/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 07 Mar 2021 23:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E5%BC%82%E5%B8%B8%E6%9C%BA%E5%88%B6/</guid>
      <description>预告：后面很精彩，记得持续关注喔！ </description>
    </item>
    
    <item>
      <title>5.12.3 组合模式</title>
      <link>https://HarryQing.github.io/posts/5.12.3-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 07 Mar 2021 16:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/5.12.3-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</guid>
      <description>组合模式是将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。
【示例5-34】 对象的组合
class Cpu { public void run() { System.out.println(&amp;#34;quickly.........&amp;#34;); } } class MainBoard { public void connect() { System.out.println(&amp;#34;connect...........&amp;#34;); } } class Memory { public void store() { System.out.println(&amp;#34;store........&amp;#34;); } } public class Computer { Cpu cpu; Memory memory; MainBoard mainBoard; public void work() { cpu.run(); memory.store(); mainBoard.connect(); } public static void main(String[] args) { Computer computer = new Computer(); computer.cpu = new Cpu(); computer.mainBoard = new MainBoard(); computer.</description>
    </item>
    
    <item>
      <title>5.12.2 模板方法模式和回调机制</title>
      <link>https://HarryQing.github.io/posts/5.12.2-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 06 Mar 2021 12:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/5.12.2-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</guid>
      <description>模板方法模式很常用，其目的是在一个方法中定义一个算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。在标准的模板方法模式实现中，主要是使用继承的方式，来让父类在运行期间可以调用到子类的方法。 详见抽象类部分示例。
　其实在Java开发中，还有另外一个方法可以实现同样的功能，那就是Java回调技术。回调是一种双向的调用模式，也就是说，被调用的接口被调用时也会调用对方的接口，简单点说明就是：A类中调用B类中的C方法，然后B类中的C方法中反过来调用A类中的D方法，那么D这个方法就叫回调方法。
回调的具体过程如下：  1. Class A实现接口CallBack —— 背景12. class A中包含class B的引用 ——背景23. class B有一个参数为CallBack的方法C ——背景34. 前三条是我们的准备条件，接下来A的对象调用B的方法C5. 然后class B就可以在C方法中调用A的方法D 　这样说大家可能还是不太理解，下面我们根据示例5-33来说明回调机制。该示例的生活背景为：有一天小刘遇到一个很难的问题“学习Java选哪家机构呢?”，于是就打电话问小高，小高一时也不太了解行情，就跟小刘说，我现在还有事，等忙完了给你咨询咨询，小刘也不会傻傻的拿着电话去等小高的答案，于是小刘对小高说，先挂电话吧，你知道答案后再打我电话告诉我吧，于是挂了电话。小高先去办自己的事情去了，过了几个小时，小高打电话给小刘，告诉他答案是“学Java当然去北京尚学堂”。
【示例5-33】 回调机制示例
/** * 回调接口 */ interface CallBack { /** * 小高知道答案后告诉小刘时需要调用的方法，即回调方法 * @param result 是问题的答案 */ public void answer(String result); } /** * 小刘类：实现了回调接口CallBack（背景一） */ class Liu implements CallBack { /** * 包含小高对象的引用 （背景二） */ private Gao gao; public Liu(Gao gao){ this.</description>
    </item>
    
    <item>
      <title>5.12.1 开闭原则</title>
      <link>https://HarryQing.github.io/posts/5.12.1-%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sat, 06 Mar 2021 10:20:00 +0800</pubDate>
      
      <guid>https://HarryQing.github.io/posts/5.12.1-%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</guid>
      <description>开闭原则(Open-Closed Principle)就是让设计的系统对扩展开放，对修改封闭。
· 对扩展开放： 　就是指，应对需求变化要灵活。 要增加新功能时，不需要修改已有的代码，增加新代码即可。
· 对修改关闭： 　就是指，核心部分经过精心设计后，不再因为需求变化而改变。
　在实际开发中，我们无法完全做到，但应尽量遵守开闭原则。</description>
    </item>
    
  </channel>
</rss>
